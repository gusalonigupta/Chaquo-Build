name: Build Chaquopy Android Library AAR - All ABI Variants

on:
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if no new yt-dlp version'
        required: false
        default: false
        type: boolean

jobs:
  check-ytdlp-version:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.version_check.outputs.should_build }}
      ytdlp_version: ${{ steps.version_check.outputs.ytdlp_version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Restore cached version
      uses: actions/cache/restore@v3
      id: cache-version
      with:
        path: .ytdlp_version
        key: ytdlp-version

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Check yt-dlp version
      id: version_check
      run: |
        LATEST_VERSION=$(curl -s https://pypi.org/pypi/yt-dlp/json | python -c "import sys, json; print(json.load(sys.stdin)['info']['version'])")
        echo "Latest yt-dlp version: $LATEST_VERSION"
        echo "ytdlp_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
        
        if [ -f ".ytdlp_version" ]; then
          STORED_VERSION=$(cat .ytdlp_version)
          echo "Stored version: $STORED_VERSION"
        else
          STORED_VERSION=""
          echo "No stored version found"
        fi
        
        if [ "${{ github.event.inputs.force_build }}" = "true" ]; then
          echo "Force build requested"
          echo "should_build=true" >> $GITHUB_OUTPUT
        elif [ "$LATEST_VERSION" != "$STORED_VERSION" ]; then
          echo "New version detected: $LATEST_VERSION (was: $STORED_VERSION)"
          echo "should_build=true" >> $GITHUB_OUTPUT
        else
          echo "No new version, skipping build"
          echo "should_build=false" >> $GITHUB_OUTPUT
        fi

    - name: Save new version to cache
      if: steps.version_check.outputs.should_build == 'true'
      run: echo "${{ steps.version_check.outputs.ytdlp_version }}" > .ytdlp_version
    
    - name: Cache new version
      if: steps.version_check.outputs.should_build == 'true'
      uses: actions/cache/save@v3
      with:
        path: .ytdlp_version
        key: ytdlp-version

  build:
    needs: check-ytdlp-version
    runs-on: ubuntu-latest
    if: needs.check-ytdlp-version.outputs.should_build == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Create gradle wrapper properties
      run: |
        mkdir -p gradle/wrapper
        echo "distributionUrl=https\://services.gradle.org/distributions/gradle-8.13-bin.zip" > gradle/wrapper/gradle-wrapper.properties

    - name: Download gradle wrapper files
      run: |
        curl -L https://raw.githubusercontent.com/gradle/gradle/v8.13.0/gradle/wrapper/gradle-wrapper.jar -o gradle/wrapper/gradle-wrapper.jar
        curl -L https://raw.githubusercontent.com/gradle/gradle/v8.13.0/gradlew -o gradlew
        curl -L https://raw.githubusercontent.com/gradle/gradle/v8.13.0/gradlew.bat -o gradlew.bat

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # --------------------------
    # Python 3.11 builds (ABI32, ARM32, x86)
    # --------------------------
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Verify Python (3.11) on runner
      run: |
        python --version || true
        python3 --version || true
        python3.11 --version || true
        which python || true
        which python3 || true
        which python3.11 || true

    - name: Build ABI32 Group (armeabi-v7a + x86, Python 3.11)
      run: ./gradlew --no-daemon :lib:assembleAbi32Debug

    - name: Build ARM32 only (armeabi-v7a, Python 3.11)
      run: ./gradlew --no-daemon :lib:assembleArm32Debug

    - name: Build x86 only (x86, Python 3.11)
      run: ./gradlew --no-daemon :lib:assembleX86Debug

    - name: Inspect built 3.11 AARs for bundled libpython
      run: |
        echo "Inspecting AARs (3.11 group)..."
        for f in lib/build/outputs/aar/*.aar; do
          echo "=== $f ==="
          unzip -l "$f" | grep -E 'libpython|libpython3\.[0-9]+' || true
        done

    - name: Upload ABI32 Group AAR
      uses: actions/upload-artifact@v4
      with:
        name: lib-abi32-debug-ytdlp-${{ needs.check-ytdlp-version.outputs.ytdlp_version }}
        path: lib/build/outputs/aar/lib-abi32-debug.aar

    - name: Upload ARM32 AAR
      uses: actions/upload-artifact@v4
      with:
        name: lib-arm32-debug-ytdlp-${{ needs.check-ytdlp-version.outputs.ytdlp_version }}
        path: lib/build/outputs/aar/lib-arm32-debug.aar

    - name: Upload x86 AAR
      uses: actions/upload-artifact@v4
      with:
        name: lib-x86-debug-ytdlp-${{ needs.check-ytdlp-version.outputs.ytdlp_version }}
        path: lib/build/outputs/aar/lib-x86-debug.aar

    - name: Stop Gradle daemon (safe switch)
      run: ./gradlew --stop || true

    # --------------------------
    # Python 3.12 builds (ABI64, ARM64, x86_64)
    # --------------------------
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Verify Python (3.12) on runner
      run: |
        python --version || true
        python3 --version || true
        python3.12 --version || true
        which python || true
        which python3 || true
        which python3.12 || true

    - name: Build ABI64 Group (arm64-v8a + x86_64, Python 3.12)
      run: ./gradlew --no-daemon :lib:assembleAbi64Debug

    - name: Build ARM64 only (arm64-v8a, Python 3.12)
      run: ./gradlew --no-daemon :lib:assembleArm64Debug

    - name: Build x86_64 only (x86_64, Python 3.12)
      run: ./gradlew --no-daemon :lib:assembleX86_64Debug

    - name: Inspect built 3.12 AARs for bundled libpython
      run: |
        echo "Inspecting AARs (3.12 group)..."
        for f in lib/build/outputs/aar/*.aar; do
          echo "=== $f ==="
          unzip -l "$f" | grep -E 'libpython|libpython3\.[0-9]+' || true
        done

    - name: Upload ABI64 Group AAR
      uses: actions/upload-artifact@v4
      with:
        name: lib-abi64-debug-ytdlp-${{ needs.check-ytdlp-version.outputs.ytdlp_version }}
        path: lib/build/outputs/aar/lib-abi64-debug.aar

    - name: Upload ARM64 AAR
      uses: actions/upload-artifact@v4
      with:
        name: lib-arm64-debug-ytdlp-${{ needs.check-ytdlp-version.outputs.ytdlp_version }}
        path: lib/build/outputs/aar/lib-arm64-debug.aar

    - name: Upload x86_64 AAR
      uses: actions/upload-artifact@v4
      with:
        name: lib-x86_64-debug-ytdlp-${{ needs.check-ytdlp-version.outputs.ytdlp_version }}
        path: lib/build/outputs/aar/lib-x86_64-debug.aar

    - name: Stop Gradle daemon (cleanup)
      run: ./gradlew --stop || true

    # Build summary
    - name: List all built AARs
      run: |
        echo "All built AARs for yt-dlp version ${{ needs.check-ytdlp-version.outputs.ytdlp_version }}:"
        find lib/build/outputs/aar/ -name "*.aar" -exec ls -lh {} \; || true
        echo ""
        echo "Total AAR count:"
        find lib/build/outputs/aar/ -name "*.aar" | wc -l || true

  # --------------------------
  # Create GitHub Release
  # --------------------------
  release:
    needs: [check-ytdlp-version, build]
    runs-on: ubuntu-latest
    if: needs.check-ytdlp-version.outputs.should_build == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Create release directory and move AARs
      run: |
        mkdir -p release
        find ./artifacts -name "*.aar" -exec cp {} ./release/ \;
        ls -la ./release/
        
    - name: Generate release notes
      id: release_notes
      run: |
        RELEASE_NOTES=$(cat << 'EOF'
        ## Android AAR Libraries for yt-dlp ${{ needs.check-ytdlp-version.outputs.ytdlp_version }}
        
        Built with Chaquopy for various Android architectures.
        
        ### Python 3.11 variants:
        - **ABI32 Group** (armeabi-v7a + x86): `lib-abi32-debug.aar`
        - **ARM32 only** (armeabi-v7a): `lib-arm32-debug.aar`
        - **x86 only** (x86): `lib-x86-debug.aar`
        
        ### Python 3.12 variants:
        - **ABI64 Group** (arm64-v8a + x86_64): `lib-abi64-debug.aar`
        - **ARM64 only** (arm64-v8a): `lib-arm64-debug.aar`
        - **x86_64 only** (x86_64): `lib-x86_64-debug.aar`
        
        ### Usage
        Add the appropriate AAR to your Android project based on your target architecture requirements.
        
        Built on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        EOF
        )
        
        # Set multiline output
        {
          echo "notes<<EOF"
          echo "$RELEASE_NOTES"
          echo "EOF"
        } >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create the release
        gh release create "v${{ needs.check-ytdlp-version.outputs.ytdlp_version }}" \
          --title "yt-dlp ${{ needs.check-ytdlp-version.outputs.ytdlp_version }}" \
          --notes '${{ steps.release_notes.outputs.notes }}' \
          --latest
        
        # Upload all AAR files
        gh release upload "${{ needs.check-ytdlp-version.outputs.ytdlp_version }}" release/*.aar